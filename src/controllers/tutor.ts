import * as async from "async";
import * as crypto from "crypto";
import * as nodemailer from "nodemailer";
import * as passport from "passport";
import * as validator from "validator";
import * as lodash from "lodash";
const typeCheck = require("type-check").typeCheck;
// import { ErrorMessage, ErrorArray } from "errors";
import { default as User, UserModel, AuthToken, Degree, Course } from "../models/User";
import { Request, Response, NextFunction } from "express";
import { LocalStrategyInfo } from "passport-local";
import { WriteError } from "mongodb";
const request = require("express-validator");
// Custom classes
class ErrorMessage {
    constructor(msg: string, param: string, value: any) {
      this.param = param;
      this.msg = msg;
      this.value = value;
    }
    msg: string;
    param: string;
    value: any;
    location: string;
    nestedErrors: Array<ErrorMessage>;
  }
  class ErrorArray {
    constructor() {
      this.errors = new Array<ErrorMessage>();
    }
    errors: Array<ErrorMessage>;
  }
/**
 * POST /addTutor
 * Add tutor to the db
 */
export let postAddTutor = (req: Request, res: Response, next: NextFunction) => {
    console.log(req.body);

    // Validate as much of the schema as we can with checkbody
    req.checkBody({
        fName: {
            isAlpha: true,
            errorMessage: "First name must contain only letters"
        },
        lName: {
            isAlpha: true,
            errorMessage: "Last name must contain only letters"
        },
        school: {
            isAlpha: true,
            errorMessage: "Please use only letters and spaces for the school name"
        }
    });

    // Create array object we can push on for custom error messages
    const erArray: ErrorArray = new ErrorArray();

    // Get errors generated by express-validator
    const errors = req.validationErrors();

    // push them onto our error array
    lodash.forEach(errors, function(value) {
      erArray.errors.push(value);
    });

    // Create counter for our array
    let x: number = 0;

    // Run validation on remaining attributes
    // Validate courses if present
    if (req.body.courses) {
        lodash.forEach(req.body.courses, function (value: Course) {
            if (!typeCheck("Number", value.number)) {
                const erObj: ErrorMessage = new ErrorMessage("Please use only numbers for number", "courses.number[" + x + "]", value.number);
                erArray.errors.push(erObj);
            }
            if (!typeCheck("String", value.name)) {
                const erObj: ErrorMessage = new ErrorMessage("Please use only letters and spaces for name", "courses.name[" + x + "]", value.name);
                erArray.errors.push(erObj);
            }
            x++;
        });
    }
    // Reset x
    x = 0;
    // Check the available attribute
    if (req.body.available) {
        lodash.forEach(req.body.available, function (value) {

        });
    }
};